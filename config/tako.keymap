/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define NAV_L 1
#define OTHER_L 2
#define NUM_L 3
#define SYM_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

&lt { quick_tap_ms = <200>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        click_layer: click_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "CLICK_LAYER";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&to>;
        };

        l2_tapDance: l2_tapDance {
            compatible = "zmk,behavior-tap-dance";
            label = "L2_TAPDANCE";
            #binding-cells = <0>;
            bindings = <&hm LEFT_ALT X>, <&kp ESCAPE>;
        };

        r1_tapDance: r1_tapDance {
            compatible = "zmk,behavior-tap-dance";
            label = "R1_TAPDANCE";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp LEFT_SHIFT>;
        };

        l1_tapDance: l1_tapDance {
            compatible = "zmk,behavior-tap-dance";
            label = "L1_TAPDANCE";
            #binding-cells = <0>;
            bindings = <&lt 5 ESCAPE>, <&to 0>;
        };

        r2_tapDance: r2_tapDance {
            compatible = "zmk,behavior-tap-dance";
            label = "R2_TAPDANCE";
            #binding-cells = <0>;
            bindings = <&hm LEFT_ALT PERIOD>, <&kp ESC>;
        };

        changed_sen: changed_sen {
            compatible = "zmk,behavior-mod-morph";
            label = "CHANGED_SEN";
            bindings = <&kp SEMICOLON>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_RGUI|MOD_RCTL|MOD_LCTL|MOD_LGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LCTL|MOD_LGUI|MOD_RCTL)>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_BEHAVIOR";
            bindings = <&changed_sen>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        new_behavior1: new_behavior1 {
            compatible = "zmk,behavior-caps-word";
            label = "NEW_BEHAVIOR1";
            #binding-cells = <0>;
            continue-list = <LEFT_COMMAND>;
        };

        com_macro: com_macro {
            compatible = "zmk,behavior-hold-tap";
            label = "COM_MACRO";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&new_behavior1>, <&kp>;
        };

        con_macro: con_macro {
            compatible = "zmk,behavior-hold-tap";
            label = "CON_MACRO";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&ew_con_macro>, <&kp>;
        };

        pppp: pppp {
            compatible = "zmk,behavior-hold-tap";
            label = "PPPP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <5000>;
            flavor = "tap-unless-interrupted";
        };
    };

    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 3>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <7 6>;
        };

        left_par {
            bindings = <&kp TAB>;
            key-positions = <13 12>;
        };

        right_par {
            bindings = <&kp TAB>;
            key-positions = <16 17>;
        };

        left_brc {
            bindings = <&kp LBRC>;
            key-positions = <22 23>;
        };

        right_brc {
            bindings = <&kp RBRC>;
            key-positions = <26 27>;
        };

        blsh {
            bindings = <&kp BSLH>;
            key-positions = <4 5>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <14 15>;
        };

        shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <17 18>;
        };

        left_shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <11 12>;
        };

        left_tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
        };

        right_tab {
            bindings = <&kp TAB>;
            key-positions = <7 8>;
        };

        left_esc {
            bindings = <&kp ESC>;
            key-positions = <21 22>;
        };

        right_esc {
            bindings = <&kp ESC>;
            key-positions = <27 28>;
        };
    };

    macros {
        ew_com_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 0 &kp LEFT_COMMAND>,
                <&macro_pause_for_release>;

            label = "NEW_MACRO";
        };

        ew_con_macro: dddd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mo 0 &kp LEFT_CONTROL>;
            label = "DDDD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer_right {
            bindings = <
&lt 1 Q             &hm LEFT_ALT W      &kp E               &kp R               &kp T      &kp Y    &kp U               &kp I               &hm LEFT_ALT O      &lt 1 P
&hm LEFT_COMMAND A  &pppp LEFT_SHIFT S  &pppp LEFT_SHIFT D  &hm LEFT_COMMAND F  &lt 4 G    &lt 4 H  &hm LEFT_COMMAND J  &pppp RSHFT K       &pppp LEFT_SHIFT L  &hm LEFT_COMMAND SEMICOLON
&lt 1 Z             &l2_tapDance        &hm LEFT_ALT C      &hm LEFT_ALT V      &kp B      &kp N    &hm LEFT_ALT M      &hm LEFT_ALT COMMA  &r2_tapDance        &lt 1 FSLH
                                                            &lt 5 SPACE         &mo 3      &mo 2    &lt 6 SPACE
            >;
        };

        readbook_layer {
            bindings = <
&none   &hm LEFT_ALT LEFT      &kp UP_ARROW       &hm LEFT_COMMAND RIGHT  &kp PG_UP           &kp PAGE_UP       &hm LEFT_COMMAND LEFT_ARROW  &kp UP_ARROW    &hm LEFT_ALT RIGHT             &none
&none   &hm LEFT_COMMAND LEFT  &kp DOWN_ARROW     &hm LEFT_SHIFT RIGHT    &kp PG_DN           &kp PAGE_DOWN     &hm LEFT_SHIFT LEFT          &kp DOWN_ARROW  &hm RIGHT_COMMAND RIGHT_ARROW  &none
&trans  &none                  &kp C_VOLUME_DOWN  &kp C_VOL_UP            &none               &none             &kp C_VOLUME_DOWN            &kp C_VOL_UP    &none                          &trans
                                                  &kp LEFT_COMMAND        &kp LEFT_CONTROL    &kp LEFT_CONTROL  &kp LEFT_COMMAND
            >;
        };

        nav_layer_right {
            bindings = <
&kp NUMBER_1         &kp NUMBER_2             &kp NUMBER_3       &kp NUMBER_4         &kp GRAVE        &kp PAGE_UP    &hm LEFT_COMMAND LEFT        &kp UP_ARROW       &hm LEFT_ALT RIGHT          &hm LEFT_CONTROL BACKSPACE
&hm LEFT_COMMAND N5  &hm LEFT_SHIFT NUMBER_6  &hm LEFT_SHIFT N7  &hm LEFT_COMMAND N8  &kp BACKSLASH    &kp PAGE_DOWN  &hm LEFT_COMMAND LEFT_ARROW  &pppp LSHIFT DOWN  &pppp LEFT_SHIFT RIGHT      &hm LEFT_COMMAND ENTER
&hm LEFT_ALT MINUS   &hm LEFT_ALT EQUAL       &hm LEFT_ALT N9    &hm LEFT_ALT N0      &kp SQT          &kp SQT        &kp GRAVE                    &kp LEFT_BRACKET   &hm LEFT_ALT RIGHT_BRACKET  &hm LEFT_CONTROL BACKSLASH
                                                                 &trans               &trans           &trans         &trans
            >;
        };

        nav_layer_left {
            bindings = <
&hm LEFT_CONTROL BACKSPACE  &hm LEFT_ALT LEFT          &kp UP_ARROW           &hm LEFT_COMMAND RIGHT  &kp PAGE_UP      &none   &kp N1     &kp N2     &kp N3  &kp N4
&hm LEFT_COMMAND ENTER      &pppp LEFT_SHIFT LEFT      &pppp LEFT_SHIFT DOWN  &hm LEFT_COMMAND RIGHT  &kp PAGE_DOWN    &none   &kp N5     &kp N6     &kp N7  &kp N8
&hm LEFT_CONTROL BACKSLASH  &hm LEFT_ALT LEFT_BRACKET  &kp RIGHT_BRACKET      &kp GRAVE               &kp SQT          &none   &kp MINUS  &kp EQUAL  &kp N9  &kp N0
                                                                              &trans                  &trans           &trans  &trans
            >;
        };

        num_layer {
            bindings = <
&kp N1     &kp N2     &kp N3  &kp N4            &none             &none           &kp N1            &kp N2     &kp N3  &kp N4
&kp N5     &kp N6     &kp N7  &kp N8            &none             &none           &kp N5            &kp N6     &kp N7  &kp N8
&kp MINUS  &kp EQUAL  &kp N9  &kp N0            &none             &none           &kp MINUS         &kp EQUAL  &kp N9  &kp N0
                              &kp LEFT_COMMAND  &kp LEFT_SHIFT    &kp LEFT_SHIFT  &kp LEFT_COMMAND
            >;
        };

        function_layer_left {
            bindings = <
&kp P                       &kp O               &kp I                &kp U               &kp Y     &kp F8    &kp F9      &kp F10           &kp F11            &kp F12
&hm LEFT_COMMAND SEMICOLON  &hm LSHIFT L        &hm LEFT_SHIFT K     &hm LEFT_COMMAND J  &kp H     &kp BSLH  &kp GRAVE   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SEMICOLON
&hm LEFT_COMMAND FSLH       &hm LEFT_ALT COMMA  &hm LEFT_ALT PERIOD  &hm LEFT_COMMAND M  &kp N     &kp SQT   &kp F2      &kp COMMA         &kp PERIOD         &kp SLASH
                                                                     &trans              &trans    &none     &kp INSERT
            >;
        };

        function_layer_right {
            bindings = <
&kp F1             &kp F2             &kp F3               &kp F4             &kp F12       &kp T   &kp R               &kp E             &kp W             &kp Q
&hm LEFT_SHIFT F5  &hm LEFT_ALT F6    &hm LEFT_ALT F7      &hm LEFT_SHIFT F8  &kp F11       &kp G   &hm LEFT_COMMAND F  &hm LEFT_SHIFT D  &hm LEFT_SHIFT S  &hm LEFT_COMMAND A
&kp LEFT_BRACKET   &kp RIGHT_BRACKET  &hm LEFT_CONTROL F9  &kp F10            &kp DELETE    &kp B   &hm LEFT_COMMAND V  &hm LEFT_ALT C    &hm LEFT_ALT X    &hm LEFT_COMMAND Z
                                                           &trans             &trans        &trans  &trans
            >;
        };
    };
};
